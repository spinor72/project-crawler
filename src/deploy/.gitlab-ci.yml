image: alpine:latest

stages:
  - test
  - staging
  - production

test:
  stage: test
  script:
    - exit 0
  only:
    - triggers
    - branches

staging:
  stage: staging
  script:
  - install_dependencies
  - ensure_namespace
  - install_tiller
  - deploy
  variables:
    KUBE_NAMESPACE: staging

  environment:
    name: staging
    url: https://staging.crawler.rportal.cloud
  only:
    refs:
      - master
    kubernetes: active

production:
  stage: production
  script:
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - deploy
  variables:
    KUBE_NAMESPACE: production
  environment:
    name: production
    url: https://production.crawler.rportal.cloud
  when: manual
  only:
    refs:
      - master
    kubernetes: active

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  # export CI_REGISTRY="index.docker.io"
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY/$CI_PROJECT_PATH
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export TILLER_NAMESPACE="kube-system"

  function deploy() {
    echo "deploy ..."
    echo $KUBE_NAMESPACE
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"
    helm dep build crawler
    echo "create secret for registry ..."
    # kubectl create secret -n "$KUBE_NAMESPACE" \
    #   docker-registry gitlab-registry \
    #   --docker-server="https://registry.rportal.cloud/v1/" \
    #   --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" \
    #   --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" \
    #   --docker-email="$GITLAB_USER_EMAIL" \
    #   -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
    # if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
    #   secret_name='gitlab-registry'
    # else
    #   secret_name=''
    # fi
    # for microservice in $(helm dep ls | grep "file://" | awk '{print $1}') ; do
    #   SET_VERSION="$SET_VERSION \ --set $microservice.image.tag='$(curl http://gitlab-gitlab/$CI_PROJECT_NAMESPACE/ui/raw/master/VERSION)' "
    # header="PRIVATE-TOKEN: $USER_ACCESS_TOKEN"
    echo "helm install ..."
    helm upgrade --install  \
      --wait \
      --set ui.image.tag="$(curl --request GET --header 'PRIVATE-TOKEN: '"$USER_ACCESS_TOKEN"'' https://gitlab.rportal.cloud/$CI_PROJECT_NAMESPACE/ui/raw/master/VERSION)" \
      --set engine.image.tag="$(curl --request GET --header 'PRIVATE-TOKEN: '"$USER_ACCESS_TOKEN"'' https://gitlab.rportal.cloud/$CI_PROJECT_NAMESPACE/engine/raw/master/VERSION)" \
      --set ui.image.repository="$CI_REGISTRY/$CI_PROJECT_NAMESPACE/ui" \
      --set ui.ingress.host="${KUBE_NAMESPACE}.crawler.rportal.cloud" \
      --set ui.ingress.class=gitlab-nginx \
      --set engine.image.repository="$CI_REGISTRY/$CI_PROJECT_NAMESPACE/engine" \
      --set rabbitmq.rabbitmq.username=crawler \
      --set rabbitmq.rabbitmq.password="$RABBITMQ_DEFAULT_PASS" \
      --set engine.rmq.password="$RABBITMQ_DEFAULT_PASS" \
      --set engine.rmq.username=crawler \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$name" \
      crawler
    # --set image.secrets[0].name="$secret_name" \
  }

  function install_dependencies() {

    apk add -U openssl curl tar gzip bash ca-certificates git
    # apk --no-cache add ca-certificates wget
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.28-r0/glibc-2.28-r0.apk
    apk add glibc-2.28-r0.apk
    rm glibc-2.28-r0.apk

    curl https://kubernetes-helm.storage.googleapis.com/helm-v2.9.1-linux-amd64.tar.gz | tar zx

    mv linux-amd64/helm /usr/bin/
    helm version --client

    # не работает install_tiller под версией 1.11.2, зафиксил на 1.10.2
    # curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.8.10/bin/linux/amd64/kubectl
    chmod +x /usr/bin/kubectl
    kubectl version --client
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function install_tiller() {
    echo "Checking Tiller..."
    helm init --upgrade
    echo " tiller-deploy ..."
    kubectl rollout status -n "$TILLER_NAMESPACE" -w "deployment/tiller-deploy"
    if ! helm version --debug; then
      echo "Failed to init Tiller."
      return 1
    fi
    echo " -- Tiller "
  }

  function delete() {
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"
    helm delete "$name" || true
  }

before_script:
  - *auto_devops
